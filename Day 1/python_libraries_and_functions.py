# -*- coding: utf-8 -*-
"""Python Libraries and Functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uesIlMYGZ8r-oD5FXA2uyU3VMy_nq-cn

## Python Libraries

Python library is a collection of functions and methods that allows you to perform many actions without writing your code.

Some of these libraries are in the "standard library", meaning you can find them anywhere you run Python. Others libraries can be easily added, even if they aren't always shipped with Python.

Either way, we'll access this code with imports.

We'll start our example by importing math from the standard library.
"""

import math

print("It's math! It has type {}".format(type(math)))

"""math is a module. A module is just a collection of variables (a namespace, if you like) defined by someone else. We can see all the names in math using the built-in function dir()."""

print(dir(math))

"""We can access these variables using dot syntax."""

math.log(32, 2)

"""Of course, if we don't know what math.log does, we can call help() on it:"""

help(math.log)

"""We can also call help() on the module itself. This will give us the combined documentation for all the functions and values in the module (as well as a high-level description of the module). Click the "output" button to see the whole math help page."""

help(math)

"""Other import syntax

If we know we'll be using functions in math frequently we can import it under a shorter alias to save some typing (though in this case "math" is already pretty short).
"""

import pandas
help(pandas)

import math as mt
mt.pi

from math import pi

pi

"""You may have seen code that does this with certain popular libraries like Pandas, Numpy, Tensorflow, or Matplotlib. For example, it's a common convention to import numpy as np and import pandas as pd.

Based on https://www.kaggle.com/colinmorris/working-with-external-libraries

# Functions

A function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

A function can return data as a result.

You've already seen and used functions such as print. But Python has many more functions, and defining your own functions is a big part of python programming.

The help() function is possibly the most important Python function you can learn. If you can remember how to use help(), you hold the key to understanding most other function.
"""

help(print)

"""help() displays two things:

    1. the header of that function round(number[, ndigits]). In this case, this tells us that round() takes an argument we can describe as number. Additionally, we can optionally give a separate argument which could be described as ndigits.
    2. A brief English description of what the function does.

Common pitfall: when you're looking up a function, remember to pass in the name of the function itself, and not the result of calling that function.

## Defining Functions

Builtin functions are great, but we can only get so far with them before we need to start defining our own functions. Below is a simple example.
"""

def least_difference(a, b, c):
    diff1 = abs(a - b)
    diff2 = abs(b - c)
    diff3 = abs(a - c)
    return diff1, diff2, diff3

"""This creates a function called least_difference, which takes three arguments, a, b, and c.

Functions start with a header introduced by the def keyword. The indented block of code following the : is run when the function is called.

return is another keyword uniquely associated with functions. When Python encounters a return statement, it exits the function immediately, and passes the value on the right hand side to the calling context.

Is it clear what least_difference() does from the source code? If we're not sure, we can always try it out on a few examples:
"""

print(
    least_difference(1, 10, 100),
    least_difference(1, 10, 10),
    least_difference(5, 6, 7), # Python allows trailing commas in argument lists. How nice is that?
)

"""Based on https://www.kaggle.com/colinmorris/functions-and-getting-help

Resource : https://www.w3schools.com/python/python_functions.asp
"""