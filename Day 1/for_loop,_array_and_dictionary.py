# -*- coding: utf-8 -*-
"""For Loop, Array and Dictionary.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C362ORmqjUttUowgIgUXOmloqL7mj2PF

# For Loop

A for loop is used for iterating over a sequence (that is either a list, a tuple, a dictionary, a set, or a string).

This is less like the for keyword in other programming languages, and works more like an iterator method as found in other object-orientated programming languages.

With the for loop we can execute a set of statements, once for each item in a list, tuple, set etc
"""

for i in range(0, 6, 2):
    print(i)

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)

"""Even strings are iterable objects, they contain a sequence of characters:"""

for x in "banana":
  print(x)

"""Resource : https://www.w3schools.com/python/python_for_loops.asp

# Array

An array is a special variable, which can hold more than one value at a time.
"""

from numpy import array

num = array([1, 2, 3])

num

"""An array can hold many values under a single name, and you can access the values by referring to an index number."""

print(num[0])

"""So how are arrays different from lists?"""

print(num/3)

num_list = [1, 2, 3]
print(num_list)
print(num_list/3)

for i in range(len(num_list)):
  num_list[i] = num_list[i]/3

num_list

n_arr = array([1, 2, 3])
n_list = [1, 2, 3]

n_arr/3

n_arr

n_list/3

for i in range(len(n_list)):
  n_list[i] = n_list[i]/3

print(n_list)

"""Arrays can handle mathematical operations but lists cannot.

Resource : https://docs.scipy.org/doc/numpy/reference/generated/numpy.array.html

https://medium.com/backticks-tildes/list-vs-array-python-data-type-40ac4f294551

# Dictionary

Dictionary in Python is an unordered collection of data values, used to store data values like a map, which unlike other Data Types that hold only single value as an element, Dictionary holds key:value pair. Key value is provided in the dictionary to make it more optimized. Each key-value pair in a Dictionary is separated by a colon :, whereas each key is separated by a ‘comma’.

A Dictionary in Python works similar to the Dictionary in a real world. Keys of a Dictionary must be unique and of immutable data type such as Strings, Integers and tuples, but the key-values can be repeated and be of any type.
"""

thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964,
  "max speed": 45.65
}
print(thisdict)

"""You can access the items of a dictionary by referring to its key name, inside square brackets:"""

x = thisdict["brand"]
print(x)

"""You can change the value of a specific item by referring to its key name:"""

thisdict =	{
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

print(thisdict)

thisdict["year"] = 2018

print(thisdict)

d = {"St 1":{ "M1":45, "M2":45, "M3":45},
     "St 2":{ "M1":45, "M2":45, "M3":45},
     "St 3":{ "M1":45, "M2":45, "M3":45}  
}}

"""You cannot copy a dictionary simply by typing dict2 = dict1, because: dict2 will only be a reference to dict1, and changes made in dict1 will automatically also be made in dict2.

There are ways to make a copy, one way is to use the built-in Dictionary method copy().
"""

mydict = thisdict.copy()
print(mydict)

"""You can get all the keys or all the values of a dictionary using the methods keys() and values()."""

print(mydict.keys())
print(mydict.values())

"""You can loop through a dictionary by using a for loop.

When looping through a dictionary, the return value are the keys of the dictionary, but there are methods to return the values as well.
"""

# Print all key names in the dictionary, one by one:

for x in thisdict:
  print(x)

# Print all values in the dictionary, one by one:

for x in thisdict:
  print(thisdict[x])

# Loop through both keys and values, by using the items() function:

for x, y in thisdict.items():
  print(x, y)

thisdict

thisdict["speed"] = 67

thisdict.update({"speed":67})

thisdict

"""Resource : https://www.w3schools.com/python/python_dictionaries.asp"""